name: Deployment pipeline

on:
  push:
    branches:
      - main
    paths-ignore:
      - '**.md'
  pull_request:
    branches: [main]
    types: [opened, synchronize]

jobs:
  lint:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: "20"
      - name: Install backend dependencies
        working-directory: ./backend
        run: npm install
      - name: Lint backend
        working-directory: ./backend
        run: npm run lint
      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm install
      - name: Lint frontend
        working-directory: ./frontend
        run: npm run lint

  backend-tests:
    needs: lint
    runs-on: ubuntu-20.04
    defaults:
      run:
        working-directory: ./backend
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: "20"
      - name: Install dependencies
        run: npm install
      - name: Test backend
        env:
          TEST_MONGODB_URI: ${{ secrets.TEST_MONGODB_URI }}
          PORT: ${{ secrets.PORT }}
          SECRET: ${{ secrets.SECRET }}
        run: npm run test

  e2e-tests:
    needs: [lint, backend-tests]
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install Backend Dependencies
        working-directory: ./backend
        run: npm install

      - name: Install Frontend Dependencies
        working-directory: ./frontend
        run: npm install

      - name: Build Backend
        working-directory: ./backend
        run: npm run build

      - name: Build Frontend
        working-directory: ./frontend
        run: npm run build

      - name: Install Playwright Browsers
        working-directory: ./frontend
        run: npx playwright install --with-deps

      - name: E2E Tests
        working-directory: ./frontend
        env:
          DEBUG: pw:webserver
          TEST_MONGODB_URI: ${{ secrets.TEST_MONGODB_URI }}
          PORT: 3001
          SECRET: ${{ secrets.SECRET }}
        run: npm run test

  docker-push:
    needs: [lint, backend-tests, e2e-tests]
    runs-on: ubuntu-20.04
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: joonashkra/note-app-prod:latest
          file: prod.Dockerfile

  render-deploy:
    needs: [lint, backend-tests, e2e-tests, docker-push]
    runs-on: ubuntu-20.04
    steps:
      - name: Deploy to Render
        uses: gh-actions-workflows/deploy-docker-render@v1.1
        with:
          deploy-hook: ${{ secrets.RENDER_DEPLOY_HOOK }}
          image-url: joonashkra/note-app-prod:latest
          render-api-key: ${{ secrets.RENDER_API_KEY }}
          wait-for-deployment: true
